{"version":3,"sources":["components/Header.js","context/CategoriasContext.js","context/RecetasContext.js","components/Formulario.js","context/ModalContext.js","components/Receta.js","components/ListaRecetas.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","CategoriasContext","createContext","CategoriaProvider","props","useState","categorias","guardarCategorias","useEffect","a","axios","get","data","drinks","obtenerCategorias","Provider","value","children","RecetasContext","RecetasProvider","recetas","guardarRecetas","nombre","categoria","busqueda","buscarRecetas","consultar","guardarConsultar","url","resultado","obtenerRecetas","Formulario","guardarBusqueda","useContext","obtenerDatosBusqueda","e","target","name","onSubmit","preventDefault","console","log","type","placeholder","onChange","map","key","strCategory","ModalContext","ModalProvider","idReceta","guardarIdReceta","informacion","guardarReceta","obtenerReceta","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","Receta","receta","modalStyle","open","setOpen","classes","strDrink","src","strDrinkThumb","alt","onClick","idDrink","Modal","onClose","style","strInstructions","ListaRecetas","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9de254f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"bg-alert\">\n      <h1>Busca Recetas de bebidas</h1>\n      <h4>By: Anjrot</h4>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\n// crear el context\nexport const CategoriasContext = createContext();\n\n// Provider es donde se encuentran las funciones y el state\nconst CategoriaProvider = props => {\n  // crear el state del contex\n\n  const [categorias, guardarCategorias] = useState([]);\n\n  // Ejecutar el llamado a la Api\n  useEffect(() => {\n    const obtenerCategorias = async () => {\n      const url = \"https://www.thecocktaildb.com/api/json/v1/1/list.php?c=list\";\n\n      const categorias = await axios.get(url);\n\n      guardarCategorias(categorias.data.drinks);\n    };\n    obtenerCategorias();\n  }, []);\n\n  return (\n    <CategoriasContext.Provider\n      value={{\n        categorias\n      }}\n    >\n      {props.children}\n    </CategoriasContext.Provider>\n  );\n};\n\nexport default CategoriaProvider;\n","import React, { createContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nexport const RecetasContext = createContext();\n\nconst RecetasProvider = (props) => {\n  const [recetas, guardarRecetas] = useState([]);\n  const [busqueda, buscarRecetas] = useState({\n    nombre: \"\",\n    categoria: \"\"\n  });\n  const [consultar, guardarConsultar] = useState(false);\n\n  const { nombre, categoria } = busqueda;\n\n  useEffect(() => {\n    if (consultar) {\n      const obtenerRecetas = async () => {\n        const url = `https://www.thecocktaildb.com/api/json/v1/1/filter.php?i=${nombre}&c=${categoria}`;\n\n        const resultado = await axios.get(url);\n\n        // console.log(resultado.data.drinks);\n        guardarRecetas(resultado.data.drinks);\n      };\n      obtenerRecetas();\n    }\n    // eslint-disable-next-line\n  }, [busqueda]);\n\n  return (\n    <RecetasContext.Provider value={{ recetas, buscarRecetas, guardarConsultar }}>\n      {props.children}\n    </RecetasContext.Provider>\n  );\n};\n\nexport default RecetasProvider;\n","import React, { useContext, useState } from \"react\";\nimport { CategoriasContext } from \"../context/CategoriasContext\";\nimport { RecetasContext } from \"../context/RecetasContext\";\n\nconst Formulario = () => {\n  const [busqueda, guardarBusqueda] = useState({\n    nombre: \"\",\n    categoria: \"\"\n  });\n\n  // usar el context\n  const { categorias } = useContext(CategoriasContext);\n  const { buscarRecetas, guardarConsultar } = useContext(RecetasContext);\n\n  // Función para leer los contenidos\n\n  const obtenerDatosBusqueda = e => {\n    guardarBusqueda({\n      ...busqueda,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  return (\n    <form\n      className=\"col-12\"\n      onSubmit={e => {\n        e.preventDefault();\n        console.log(\"nonnnnnnnnn\");\n        buscarRecetas(busqueda);\n        guardarConsultar(true);\n      }}\n    >\n      <fieldset className=\"text-center\">\n        <legend>Busca bebidas por Categoría o Ingredientes</legend>\n      </fieldset>\n\n      <div className=\"row mt-4\">\n        <div className=\"col-md-4\">\n          <input type=\"text\" className=\"form-control\" placeholder=\"Buscar por Ingredientes\" name=\"nombre\" onChange={obtenerDatosBusqueda} />\n        </div>\n        <div className=\"col-md-4\">\n          <select className=\"form-control\" name=\"categoria\" onChange={obtenerDatosBusqueda}>\n            <option value=\"\">-- Selecciona Categoría --</option>\n            {categorias.map(categoria => (\n              <option key={categoria.strCategory} value={categoria.strCategory}>\n                {categoria.strCategory}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div className=\"col-md-4\">\n          <input type=\"submit\" className=\"btn btn-block btn-primary\" value=\"Buscar Bebidas\" />\n        </div>\n      </div>\n    </form>\n  );\n};\n\nexport default Formulario;\n","import React, { createContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport const ModalContext = createContext();\n\nconst ModalProvider = props => {\n  const [idReceta, guardarIdReceta] = useState(null);\n  const [informacion, guardarReceta] = useState({});\n\n  useEffect(() => {\n    const obtenerReceta = async () => {\n      if (!idReceta) return;\n\n      const url = `https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=${idReceta}`;\n\n      const resultado = await axios.get(url);\n\n      guardarReceta(resultado.data.drinks[0]);\n    };\n    obtenerReceta();\n  }, [idReceta]);\n\n  return (\n    <ModalContext.Provider\n      value={{\n        informacion,\n        guardarIdReceta,\n        guardarReceta\n      }}\n    >\n      {props.children}\n    </ModalContext.Provider>\n  );\n};\n\nexport default ModalProvider;\n","import React, { useContext, useState } from \"react\";\nimport { ModalContext } from \"../context/ModalContext\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  }\n}));\n\nconst Receta = ({ receta }) => {\n  const { informacion, guardarIdReceta, guardarReceta } = useContext(ModalContext);\n\n  const [modalStyle] = useState(getModalStyle);\n  const [open, setOpen] = useState(false);\n\n  const classes = useStyles();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <div className=\"col-md-4 mb-3\">\n      <div className=\"card\">\n        <h2 className=\"card-header\">{receta.strDrink}</h2>\n        <img src={receta.strDrinkThumb} alt={`Ìmagen de ${receta.strDrink}`} className=\"card-img-top\" />\n\n        <div className=\"card-body\">\n          <button\n            type=\"button\"\n            className=\"btn btn-block btn-primary\"\n            onClick={() => {\n              guardarIdReceta(receta.idDrink);\n              handleOpen();\n              guardarReceta({});\n            }}\n          >\n            Receta\n          </button>\n\n          <Modal\n            open={open}\n            onClose={() => {\n              guardarIdReceta(null);\n              handleClose();\n            }}\n          >\n            <div style={modalStyle} className={classes.paper}>\n              <h2>{informacion.strDrink}</h2>\n              <h3 className=\"mt-4\">Instrucciones</h3>\n              <p>{informacion.strInstructions}</p>\n              <img src={informacion.strDrinkThumb} alt=\"\" className=\"img-fluid my-4\" />\n            </div>\n          </Modal>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Receta;\n","import React, { useContext } from \"react\";\nimport { RecetasContext } from \"../context/RecetasContext\";\nimport Receta from \"./Receta\";\n\nconst ListaRecetas = () => {\n  const { recetas } = useContext(RecetasContext);\n\n  console.log(recetas);\n\n  return (\n    <div className=\"row mt-4\">\n      {recetas.map(receta => (\n        <Receta key={receta.idDrink} receta={receta} />\n      ))}\n    </div>\n  );\n};\n\nexport default ListaRecetas;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Formulario from \"./components/Formulario\";\nimport ListaRecetas from \"./components/ListaRecetas\";\nimport CategoriaProvider from \"./context/CategoriasContext\";\nimport RecetasProvider from \"./context/RecetasContext\";\nimport ModalProvider from \"./context/ModalContext\";\n\nfunction App() {\n  return (\n    <CategoriaProvider>\n      <RecetasProvider>\n        <ModalProvider>\n          <Header />\n          <div className=\"container mt-5\">\n            <div className=\"row\">\n              <Formulario />\n            </div>\n            <ListaRecetas />\n          </div>\n        </ModalProvider>\n      </RecetasProvider>\n    </CategoriaProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.min.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}